apply plugin: 'com.android.library'

android {
    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
    }

   splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'mips', 'armeabi'
            universalApk false
        }
    }

}

def platform = "mac"
if (System.properties['os.name'].toLowerCase().contains('windows'))
{
    platform = "win"
}

def coronaNativeDir = System.getProperty("user.home") + "/Library/Application Support/Corona/Native"
if (platform == "win")
{
    coronaNativeDir = System.getenv("CORONA_ROOT")
}

task exportPluginJar (type: Copy, description: 'place the plugin JAR file in the outputs directory and give it a name from the AndroidManifest.xml') {
    def pluginName = new XmlSlurper().parse(file('src/main/AndroidManifest.xml')).@package.text()
    from "$buildDir/intermediates/bundles/default/"
    into "$buildDir/outputs/jar"
    include 'classes.jar'
    rename 'classes.jar', "${pluginName}.jar"
    println "\n\n== exportPluginJar ==  $buildDir/outputs/${pluginName}.jar\n\n"

    doFirst {
        println "\n\n== exportPluginJar ==  $buildDir/outputs/${pluginName}.jar\n\n"
    }
}

//tasks.withType(JavaCompile) {
    //compileTask -> compileTask.dependsOn('exportPluginJar')
//}
tasks.withType(JavaCompile) {
    compileTask -> compileTask.finalizedBy('exportPluginJar')
}



dependencies {
    api fileTree(dir: "$coronaNativeDir/Corona/android/lib/Corona/libs", include: '*.jar')
    api fileTree(dir: 'libs', include: '*.jar')
}
